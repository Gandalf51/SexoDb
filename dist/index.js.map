{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { writeFileSync, readFileSync, existsSync } from \"node:fs\";\r\n\r\nexport class sexoDB {\r\n\r\n    /**\r\n   * @name SexoDB\r\n   * @description SexoDB constructor\r\n   *\r\n   * @param file string\r\n   */\r\n    constructor(private arq: string) {\r\n        if (!arq.endsWith(\".json\")) {\r\n            throw new Error(\"The file must be a JSON file.\");\r\n        }\r\n\r\n        if (!existsSync(arq)) {\r\n            writeFileSync(arq, \"{}\");\r\n        }\r\n\r\n        try {\r\n            this.content = JSON.parse(readFileSync(arq).toString());\r\n        } catch (error) {\r\n            throw new Error(`Error loading JSON database: ${error}`);\r\n        }\r\n    }\r\n\r\n    private content: Record<string, unknown>;\r\n\r\n    private async writeToFile(): Promise<void> {\r\n        writeFileSync(this.arq, JSON.stringify(this.content, null, 2));\r\n    }\r\n\r\n    /**\r\n   * @name cumAdd\r\n   * @description Add an value from key\r\n   *\r\n   * @param key string\r\n   * @param value number | bigint\r\n   */\r\n    async cumAdd(path: string, value?: number): Promise<void> {\r\n        if (!path) {\r\n            throw new Error(\"The key path is mandatory.\");\r\n        }\r\n        if (typeof value !== \"number\") {\r\n            value = 1;\r\n        }\r\n        this.content[path] = (this.content[path] as number ?? 0) + value;\r\n        await this.writeToFile();\r\n    }\r\n\r\n    /**\r\n   * @name blowjobSubtract\r\n   * @description Subtract an value from key\r\n   *\r\n   * @param key string\r\n   * @param value number | bigint\r\n   */\r\n    async blowjobSubtract(path: string, value?: number): Promise<void> {\r\n        if (!path) {\r\n            throw new Error(\"The key path is mandatory.\");\r\n        }\r\n        if (typeof value !== \"number\") {\r\n            value = 1;\r\n        }\r\n        this.content[path] = (this.content[path] as number ?? 0) - value;\r\n        await this.writeToFile();\r\n    }\r\n\r\n    /**\r\n   * @name lustAll\r\n   * @description List all of an type\r\n   *\r\n   * @param tipe\r\n   */\r\n    lustAll(): Record<string, unknown> {\r\n        return this.content;\r\n    }\r\n\r\n    /**\r\n   * @name boobsSet\r\n   * @description Set an value of an key\r\n   *\r\n   * @param key string\r\n   * @param value number | bigint\r\n   */\r\n    async boobsSet(path: string, value: unknown): Promise<void> {\r\n        if (!path) {\r\n            throw new Error(\"The key path is mandatory.\");\r\n        }\r\n        this.content[path] = value;\r\n        await this.writeToFile();\r\n    }\r\n\r\n    /**\r\n   * @name assDelete\r\n   * @description Delete an key\r\n   *\r\n   * @param key string\r\n   */\r\n    async assDelete(path: string): Promise<void> {\r\n        if (!path) {\r\n            throw new Error(\"The key path is mandatory.\");\r\n        }\r\n        delete this.content[path];\r\n        await this.writeToFile();\r\n    }\r\n\r\n    /**\r\n   * @name pussyGet\r\n   * @description Get value from an key\r\n   *\r\n   * @param key string\r\n   */\r\n    async pussyGet<T = unknown>(path: string): Promise<T> {\r\n        if (!path) {\r\n            throw new Error(\"The key path is mandatory.\");\r\n        }\r\n        return this.content[path] as T;\r\n    }\r\n}\r\n"]}