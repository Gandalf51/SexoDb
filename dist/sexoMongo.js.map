{"version":3,"file":"sexoMongo.js","sourceRoot":"","sources":["../src/sexoMongo.ts"],"names":[],"mappings":";;;AAAA,wDAAqE;AAOrE,MAAa,SAAS;IAIpB,YAAY,SAAiB,EAAE,aAAsC;QAHrE;;;;;WAAwB;QACxB;;;;mBAA6B,KAAK;WAAC;QAGjC,MAAM,MAAM,GAAG,IAAI,kBAAQ,CAAC,MAAM,CAChC;YACE,GAAG,EAAE;gBACH,IAAI,EAAE,MAAM;gBACZ,QAAQ,EAAE,IAAI;gBACd,MAAM,EAAE,IAAI;aACb;YACD,KAAK,EAAE;gBACL,IAAI,EAAE,kBAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK;gBACjC,QAAQ,EAAE,IAAI;aACf;SACF,EACD,aAAa,IAAI,EAAE,CACpB,CAAC;QAEF,IAAI,CAAC,KAAK,GAAG,kBAAQ,CAAC,KAAK,CAAI,SAAS,EAAE,MAAM,CAAC,CAAC;IACpD,CAAC;IAEM,KAAK,CAAC,OAAO,CAAC,GAAW,EAAE,OAAwB;QACxD,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,OAAO;SACR;QACD,IAAI;YACF,MAAM,kBAAQ,CAAC,OAAO,CAAC,GAAG,EAAE;gBAC1B,GAAG,OAAO;gBACV,gBAAgB,EAAE,IAAI,EAAE,0CAA0C;aACnE,CAAC,CAAC;YACH,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;SACvB;QAAC,OAAO,KAAK,EAAE;YACd,MAAM,IAAI,KAAK,CAAC,kCAAkC,KAAK,EAAE,CAAC,CAAC;SAC5D;IACH,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,GAAW,EAAE,KAAiB;QAC7C,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACnB,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;SAC9C;QACD,IAAI;YACF,MAAM,QAAQ,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,CAAC;YAChD,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;SACvB;QAAC,OAAO,KAAK,EAAE;YACd,MAAM,IAAI,KAAK,CAAC,2BAA2B,KAAK,EAAE,CAAC,CAAC;SACrD;IACH,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,GAAW;QAC1B,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACnB,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;SAC9C;QACD,IAAI;YACF,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;YACnD,IAAI,CAAC,QAAQ,EAAE;gBACb,MAAM,IAAI,KAAK,CAAC,qCAAqC,GAAG,EAAE,CAAC,CAAC;aAC7D;YACD,OAAO,QAAQ,CAAC,KAAK,CAAC;SACvB;QAAC,OAAO,KAAK,EAAE;YACd,MAAM,IAAI,KAAK,CAAC,2BAA2B,KAAK,EAAE,CAAC,CAAC;SACrD;IACH,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,GAAW;QAC7B,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACnB,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;SAC9C;QACD,IAAI;YACF,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;YACnD,IAAI,MAAM,CAAC,YAAY,KAAK,CAAC,EAAE;gBAC7B,MAAM,IAAI,KAAK,CAAC,uCAAuC,GAAG,EAAE,CAAC,CAAC;aAC/D;SACF;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,8BAA8B,KAAK,EAAE,CAAC,CAAC;YACrD,MAAM,KAAK,CAAC;SACb;IACH,CAAC;CACF;AA/ED,8BA+EC","sourcesContent":["import mongoose, { ConnectOptions, Document, Model } from 'mongoose';\r\n\r\ninterface DatabaseDocument extends Document {\r\n  key: string;\r\n  value: any;\r\n}\r\n\r\nexport class sexoMongo<T extends DatabaseDocument> {\r\n  private model: Model<T>;\r\n  private connected: boolean = false;\r\n\r\n  constructor(modelName: string, schemaOptions?: mongoose.SchemaOptions) {\r\n    const schema = new mongoose.Schema(\r\n      {\r\n        key: {\r\n          type: String,\r\n          required: true,\r\n          unique: true,\r\n        },\r\n        value: {\r\n          type: mongoose.Schema.Types.Mixed,\r\n          required: true,\r\n        },\r\n      },\r\n      schemaOptions ?? {}\r\n    );\r\n\r\n    this.model = mongoose.model<T>(modelName, schema);\r\n  }\r\n\r\n  public async connect(uri: string, options?: ConnectOptions): Promise<void> {\r\n    if (this.connected) {\r\n      return;\r\n    }\r\n    try {\r\n      await mongoose.connect(uri, {\r\n        ...options,\r\n        connectTimeoutMS: 5000, // 5 segundos de tempo limite para conex√£o\r\n      });\r\n      this.connected = true;\r\n    } catch (error) {\r\n      throw new Error(`Failed to connect to database: ${error}`);\r\n    }\r\n  }\r\n\r\n  public async add(key: string, value: T['value']): Promise<void> {\r\n    if (!this.connected) {\r\n      throw new Error('Not connected to database');\r\n    }\r\n    try {\r\n      const document = new this.model({ key, value });\r\n      await document.save();\r\n    } catch (error) {\r\n      throw new Error(`Failed to add document: ${error}`);\r\n    }\r\n  }\r\n\r\n  public async get(key: string): Promise<T['value']> {\r\n    if (!this.connected) {\r\n      throw new Error('Not connected to database');\r\n    }\r\n    try {\r\n      const document = await this.model.findOne({ key });\r\n      if (!document) {\r\n        throw new Error(`Failed to find document with key: ${key}`);\r\n      }\r\n      return document.value;\r\n    } catch (error) {\r\n      throw new Error(`Failed to get document: ${error}`);\r\n    }\r\n  }\r\n\r\n  public async remove(key: string): Promise<void> {\r\n    if (!this.connected) {\r\n      throw new Error('Not connected to database');\r\n    }\r\n    try {\r\n      const result = await this.model.deleteOne({ key });\r\n      if (result.deletedCount === 0) {\r\n        throw new Error(`Failed to remove document with key: ${key}`);\r\n      }\r\n    } catch (error) {\r\n      console.error(`Failed to remove document: ${error}`);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n"]}